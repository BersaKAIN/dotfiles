
"-------------------------
" NeoBundle setting
"-------------------------

set nocompatible
filetype off

if has('vim_starting')
	set runtimepath+=~/.vim/neobundle.vim.git
	call neobundle#rc(expand('~/.vim/.bundle'))
endif

NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \     'windows' : 'make -f make_mingw32.mak',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }

NeoBundle 'thinca/vim-quickrun'
NeoBundle 'Shougo/vimshell'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/vimfiler'
NeoBundle 'Shougo/neocomplcache'
NeoBundle 'Shougo/neosnippet'
NeoBundle 'yuroyoro/vim-python'
NeoBundle 'derekwyatt/vim-scala'
NeoBundle 'jondistad/vimclojure'
NeoBundle 'Pydiction'
NeoBundle 'kana/vim-fakeclip'
NeoBundle 'tpope/vim-surround'
NeoBundle 'vim-scripts/Align'
NeoBundle 'vim-scripts/YankRing.vim'
NeoBundle "nathanaelkane/vim-indent-guides"
""NeoBundle 'Yggdroot/indentLine'
NeoBundle 'ujihisa/unite-colorscheme'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'vim-scripts/Lucius'
NeoBundle 'vim-scripts/molokai'
NeoBundle 'vim-scripts/hybrid.vim'
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'ujihisa/neco-look.git'
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'Phize/vim-rainbow_pairs'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'vim-scripts/javacomplete'

filetype plugin on
filetype indent on


"-------------------------
" General setting
"-------------------------

set notitle
set tabstop=2
set expandtab
set softtabstop=2
set shiftwidth=2
set encoding=utf-8
set list
set listchars=tab:>-,eol:$
set clipboard+=unnamed,autoselect
set number
set backspace=indent,eol,start
set nobackup
set nowritebackup
set noswapfile
set wrap
set textwidth=0
set colorcolumn=80
set foldmethod=marker
set cursorline
set cursorcolumn


"Highlight elimination by Esc*2 
nmap <ESC><ESC> ;nohlsearch<CR><ESC>

" IME off after insert mode
inoremap <silent> <Esc> <Esc>
inoremap <silent> <C-[> <Esc>

" search with centering
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz


" colorscheme setting
syntax enable
"set background=dark
autocmd ColorScheme * highlight LineNr ctermfg=245

" select colorscheme
"colorscheme solarized
"colorscheme molokai
colorscheme hybrid

" rainbow pair"
let g:rainbow_pairs_token_pairs = [
      \ ['/(/',  '/)/'],
      \ ['/\[/', '/\]/'],
      \ ['/{/',  '/}/']
      \]

" window setting
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l


" change spelling checker colorscheme
hi clear SpellBad
hi SpellBad cterm=underline ctermfg=yellow

" strict spelling checker 
syntax spell toplevel 
set spell


"status line
set statusline=%F%m%r%h%w\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]
set laststatus=2 

hi NonText guibg=NONE guifg=DarkGreen
hi SpecialKey guibg=NONE guifg=Gray40


"Rename newfile.txtã€€<-Rename command
command! -nargs=1 -complete=file Rename f <args>|call delete(expand('#'))


"-------------------------
" Brackets Completion setting
"-------------------------
"
inoremap { {}<LEFT>
inoremap [ []<LEFT>
inoremap ( ()<LEFT>
inoremap " ""<LEFT>
inoremap ' ''<LEFT>

"-------------------------
" Pydiction setting
"-------------------------
"
autocmd FileType python setl autoindent
autocmd FileType python setl smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
autocmd FileType python setl expandtab tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType python let g:pydiction_location = '~/.vim/pydiction/complete-dict'
autocmd FileType python :inoremap # X#


"-------------------------
" Other Python setting
"-------------------------
" Execute python script C-p 
"function! s:ExecPy()
"    exe "!" . &ft . " %"
":endfunction
"command! Exec call <SID>ExecPy()
"autocmd FileType python map <silent> <C-w> :call <SID>ExecPy()<CR>

"Read Python template
autocmd BufNewFile *.py 0r $HOME/.vim/template/python_tmp.py

"-------------------------
" Java setting
"-------------------------
"
autocmd FileType java :setlocal omnifunc=javacomplete#Complete
autocmd FileType java :setlocal completefunc=javacomplete#CompleteParamsInfo

"-------------------------
" Scala setting
"-------------------------
"
autocmd BufNewFile *.scala 0r $HOME/.vim/template/scala_tmp.scala
autocmd BufNewFile,BufRead *.scala set tabstop=2 shiftwidth=2 expandtab


"-------------------------
" VimShell setting
"-------------------------

"VimShell setting
" ,is: start shell
"nnoremap <silent> ,is :VimShell<CR>

"-------------------------
" Neocomplcache setting
"-------------------------

let g:acp_enableAtStartup = 0
" Launches neocomplcache automatically on vim startup.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
" Use underscore completion.
let g:neocomplcache_enable_underbar_completion = 1
" Sets minimum char length of syntax keyword.
let g:neocomplcache_min_syntax_length = 3
" buffer file name pattern that locks neocomplcache. e.g. ku.vim or fuzzyfinder 
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Define file-type dependent dictionaries.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions',
    \ 'scala' : $HOME.'/.vim/dict/scala.dict'
    \ }

" Define keyword, for minor languages
if !exists('g:neocomplcache_keyword_patterns')
  let g:neocomplcache_keyword_patterns = {}
  endif
  let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
" imap <C-k>     <Plug>(neocomplcache_snippets_expand)
" smap <C-k>     <Plug>(neocomplcache_snippets_expand)
" inoremap <expr><C-g>     neocomplcache#undo_completion()
" inoremap <expr><C-l>     neocomplcache#complete_common_string()
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
imap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"


" SuperTab like snippets behavior.
"imap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

" AutoComplPop like behavior.
"let g:neocomplcache_enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplcache_enable_auto_select = 1
"let g:neocomplcache_disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<TAB>"
"inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"

" Enable omni completion. Not required if they are already set elsewhere in .vimrc
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion, which require computational power and may stall the vim. 
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
  endif
  let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
  "autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
  let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
  let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
  let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'


"-------------------------
" unite.vim setting
"-------------------------

" The prefix key.
nnoremap    [unite]   <Nop>
nmap    f [unite]

nnoremap [unite]u  :<C-u>Unite -no-split<Space>

nnoremap <silent> [unite]a  :<C-u>UniteWithCurrentDir -no-split -buffer-name=files buffer file_mru bookmark file<CR>
nnoremap <silent> [unite]f  :<C-u>Unite -no-split -buffer-name=files file<CR>
nnoremap <silent> [unite]b  :<C-u>Unite -no-split buffer<CR>
nnoremap <silent> [unite]u  :<C-u>Unite -no-split buffer file_mru<CR>
nnoremap <silent> [unite]m  :<C-u>Unite -no-split file_mru<CR>
nnoremap <silent> [unite]d  :<C-u>UniteWithBufferDir -no-split file<CR>

" nnoremap <silent> [unite]b  :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>

let g:yankring_zap_keys = ""
" from basyura/unite-rails
nnoremap <silent> [unite]rm  :<C-u>Unite -no-split rails/model<CR>
nnoremap <silent> [unite]rc  :<C-u>Unite -no-split rails/controller<CR>
nnoremap <silent> [unite]rv  :<C-u>Unite -no-split rails/view<CR>
nnoremap <silent> [unite]rl  :<C-u>Unite -no-split rails/lib<CR>
nnoremap <silent> [unite]rj  :<C-u>Unite -no-split rails/javascript<CR>
nnoremap <silent> [unite]rs  :<C-u>Unite -no-split rails/spec<CR>


autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()"{{{
  " Overwrite settings.

  " exit by ESC*2
  nmap <buffer> <ESC>      <Plug>(unite_exit)
  nmap <buffer> <ESC><ESC> <Plug>(unite_exit)
  imap <buffer> jj      <Plug>(unite_insert_leave)
  nnoremap <silent><buffer> <C-k> :<C-u>call unite#mappings#do_action('preview')<CR>
  imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)
  " Start insert.
  let g:unite_enable_start_insert = 1

  " Split window (horizontally)
  nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
  inoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')

  " Split window (vertically) 
  nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
  inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
endfunction"}}}

let g:unite_source_file_mru_limit = 200

" unite-plugins
cnoremap UH Unite help<Enter>
cnoremap UO Unite outline<Enter>

"------------------------------------
" indentLine setting
"------------------------------------
"
""let g:indentLine_color_term = 245
""let g:indentLine_color_gui = '#708090'
""let g:indentLine_char = 'Â¦' "use Â¦, â”† or â”‚ 

"------------------------------------
" vim-indent-guide setting
"------------------------------------
"
let g:indent_guides_auto_colors=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd   ctermbg=233
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven  ctermbg=233
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_guide_size=1
            
"------------------------------------
" vim-filer setting
"------------------------------------
"
let g:vimfiler_as_default_explorer=1
let g:vimfiler_safe_mode_by_default=0
autocmd VimEnter * VimFiler -split -simple -winwidth=35 -no-quit
nnoremap <silent> ,fi :<C-u>VimFilerBufferDir -split -simple -winwidth=35 -no-quit<CR>

"------------------------------------
" syntactic setting
"------------------------------------
"
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=2
let g:syntastic_mode_map = { 'mode': 'active',
  \ 'active_filetypes': [],
  \ 'passive_filetypes': ['html', 'tex'] }
""------------------------------------
" quickrun setting
"------------------------------------
"
let g:quickrun_config={'*': {'split': ''}}
set splitbelow

"------------------------------------
" lightline setting
"------------------------------------
"
"
if !has('gui_running')
    set t_Co=256
  endif

