#!/usr/bin/env python
#encoding: utf-8

import sys, os
import logging
import datetime
import optparse
import commands
import numpy as np
import pickle

# make logger with script_name
script_name = sys.argv[0].split('/')[-1]
log = logging.getLogger(script_name)
logging.basicConfig(level=logging.ERROR, format="[%(name)s; %(levelname)s @ %(asctime)s] %(message)s")
#log.info("information message")
#log.error("error message")


#recording start_time
start_time = datetime.datetime.now()
start_utime = os.times()[0]
info['start_time'] = start_time.isoformat()


# make command line parser
parser = optparse.OptionParser(usage="Usage: %prog [options] args ...", description="use pydoc or epydoc.", version="%prog " + __version__)
parser.add_option("--verbose", action="store_true", dest="verbose")
parser.add_option("-q", "--quiet", action="store_false", dest="verbose")
parser.add_option("-i", "--in", dest="input")
parser.add_option("-p", "--parameter", dest="parameter", type="float")
parser.set_defaults(parameter=1.0)
parser.add_option("-n", "--number", dest="number", type="int")
parser.set_defaults(number=10)
(opt, arg) = parser.parse_args()
#if opt.verbose:
#	param1 = opt.parameter
#	param2 = opt.number
parser.add_option("--rseed", dest="rseed", type="int")
np.random.seed(opt.rseed)

# save experiment conditions
info = {}

if __name__ = '__main__':
	global info
	
	# set info here
	info['script_name'] = sys.argv[0].split('/')[-1]
	info['script_version'] = __version__
	info['python_version'] = platform.python_version()
	info['sys_uname'] = platform.uname()
	
	# save machine spec
	if platform.system() == 'Darwin':
		info['sys_info'] = commands.getoutput('system_profiler \ -detailLevel mini SPHardwareDataType').split('\n')[4:-1]
	elif platform.system() == 'FreeBSD':
		info['sys_info'] = commands.getoutput('sysclt hw').split('\n')
	elif platform.system() == 'Linux':
		info['sys_info'] = commands.getoutput('cat /proc/cpuinfo').split('\n')

	# copy information in options to dictionary info
	for i in opt.__dict__.keys():
		if i[0] != "_":
			info['option_' + i] = str(getattr(opt, i))

	for key in info.keys():
		outfile.write("#%s=%s\n" % (key, str(info[key])))



#recording end_time
end_time = datetime.datetime.now()
end_utime = os.times()[0]
log.info("end time=" + end_time.isoformat())
info['end_time'] = end_time.isoformat()
info['elapsed_time'] = str((end_time - start_time))
info['elapsed_utime'] = str((end_utime - start_utime))

